1. problem:
Main: Find the schedule for purchasing
The schedule is for 1 week - 7 days 
- Each day includes which store (1 store/day) and which items. 
- If there are houses can be completed (all items bought) -> deliver immediately
- cannot store the items bought in storage for more than 1 days (from the day of purchase)

Sub:
- Number of trips per store has to be minimum
- Number of different times they have to buy the same item to be minimum
*Example of the second situation:
Day 1: visit store A -> buy potato (house A and house B need)
Day 2: visit store B -> buy sth else and deliver to House A, but house B still needs sth from store C
Day 3: visit store C -> buy potato again and deliver to House B

2. Data structure - in terms of classes
- Item class: main data point
contains "name", "cost"

- Node class: implemetation of linkedList
contains "data", "head" and "tail"

- Store class: implmentation of linkedList (list in python)
contains a list of "Item" and the store "name"

3. Algorithm
We have a list of "Order"
- each "Order" will contain the name of the user (the house), a fixed list of "Product", a temporary list of "Product", a total cost (int)
- the "Product" will have 2 attributes: the item and the quanity

We have a buylist for all 7 days: buyList7 = []

algo(currentStore, daysCount):
while (1 -> 7 days):
    buyList = []

    if daysCount == 1 then re-initialize all temporary list for un-done Order (copy the fixed and paste it to the temporary?)

    if (every Order is done):
        we get a solution (buyList7), then compare the solution to the best solution we had
        Compare on the attributes: length of the solution, number of times an item is bought
    else
        for (each Order):
            if (Order is not done)
                for (each Product):
                    Search the product in the currentStore, if found then{
                        remove the Product from the temporary list inside Order, if the list is empty{
                            marked Order as done
                            add all the Product in the fixed list of Order to the Buy list for today
                        }
                    }
                    if not then do nothing

    if (daysCount >= 2) daysCount = 1
    else daysCount++

    buyList7.append(buyList)

    currentStore = findNextStore(currentStore)
    algo(currentStore, daysCount)




